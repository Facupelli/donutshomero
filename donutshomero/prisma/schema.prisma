datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Type{
  SINGLE
  PROMO
}

model Donut {
  id                String     @default(cuid()) @id
  name              String
  type              Type
  price             Int
  quantity          Int         @default(1)
  donuts            String[]
  donutsQuantity    Int?
  Customers         DonutsByUsers[]
  Orders            Order[]
}

// model DonutsPromo {
//   id                String     @default(cuid()) @id
//   title             String
//   price             Int
//   quantity          Int?
//   donuts            String[]
//   donutsQuantity    Int
//   Customers         DonutsPromoByUsers[]
// }

model User {
  id                      String       @default(cuid()) @id
  name                    String
  surname                 String
  phone                   Int
  address                 String
  addressNumber           Int
  ubiLink                 String?
  email                   String?   @unique
  createdAt               DateTime  @default(now()) @map(name: "created_at")
  updatedAt               DateTime  @updatedAt @map(name: "updated_at")
  donutsBought            DonutsByUsers[]
  orders                  Order[]
  // DonutsPromosBought      DonutsPromoByUsers[]
  @@map(name: "users")
}

model Order {
  id                      String       @default(cuid()) @id
  items                   Donut[]
  customer                User       @relation(fields: [customerId], references: [id])
  customerId              String
  paymentMethod           String
  createdAt               DateTime  @default(now()) @map(name: "created_at")
  updatedAt               DateTime  @updatedAt @map(name: "updated_at")
  
  @@map(name: "orders")
}

model DonutsByUsers {
  donut       Donut     @relation(fields: [donutId], references: [id])
  donutId     String // relation scalar field (used in the `@relation` attribute above)
  user        User @relation(fields: [userId], references: [id])
  userId      String // relation scalar field (used in the `@relation` attribute above)
  assignedAt  DateTime @default(now())

  @@id([donutId, userId])
}

// model DonutsPromoByUsers {
//   donutsPromo       DonutsPromo     @relation(fields: [donutId], references: [id])
//   donutId           String // relation scalar field (used in the `@relation` attribute above)
//   user              User @relation(fields: [userId], references: [id])
//   userId            String // relation scalar field (used in the `@relation` attribute above)
//   assignedAt        DateTime @default(now())

//   @@id([donutId, userId])
// }


